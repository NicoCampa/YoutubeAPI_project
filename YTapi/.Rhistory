geom_point(aes(x=great), data=associations,
size=5)+
theme_gdocs()+ geom_text(aes(x=great,
label=great),
colour="darkred",hjust=0.5,size=4, vjust=-1)+
theme(text=element_text(size=20),
axis.title.y=element_blank())
# BI-GRAMS
corpusBi <- Corpus(VectorSource(comments$ErasedEmoji))
corpusBi <- tm_map(corpusBi, content_transformer(tolower)) #all lowercase
corpusBi <- tm_map(corpusBi, removeNumbers) #remove numbers
corpusBi <- tm_map(corpusBi, removeWords, c(tm::stopwords('en'),'app')) #remove english stopwords
corpusBi <- tm_map(corpusBi, content_transformer(str_replace_all), '-', ' ') #replace dashes with spaces
corpusBi <- tm_map(corpusBi, content_transformer(str_replace_all), '–', ' ')
corpusBi <- tm_map(corpusBi, removePunctuation) #remove punctuation
corpusBi <- tm_map(corpusBi, stripWhitespace) #remove white spaces
# BI-GRAMS
corpusBi <- Corpus(VectorSource(comments$ErasedEmoji))
corpusBi <- tm_map(corpusBi, content_transformer(tolower)) #all lowercase
corpusBi <- tm_map(corpusBi, removeNumbers) #remove numbers
corpusBi <- tm_map(corpusBi, removeWords, c(tm::stopwords('en'))) #remove english stopwords
corpusBi <- tm_map(corpusBi, content_transformer(str_replace_all), '-', ' ') #replace dashes with spaces
corpusBi <- tm_map(corpusBi, content_transformer(str_replace_all), '–', ' ')
corpusBi <- tm_map(corpusBi, removePunctuation) #remove punctuation
corpusBi <- tm_map(corpusBi, stripWhitespace) #remove white spaces
dfBi <- data.frame(text = sapply(corpusBi, as.character), stringsAsFactors = FALSE)
bigrams <- dfBi %>%
unnest_tokens(bigram, text, token = 'ngrams', n = 2)  %>%
separate(bigram, c('c1', 'c2'), sep = " " )
#most frequent bigrams
bigram_counts <- bigrams %>%
count(c1, c2, sort = TRUE) #the emoji play a big role in that...
bigram_counts <- bigram_counts %>%
drop_na(c1) %>%
drop_na(c2)
head(bigram_counts, 10)
bigram_graph <- bigram_counts %>%
filter(n > 170) %>%
graph_from_data_frame()
set.seed(1)
#graph of bigrams
a <- grid::arrow(type = 'closed', length = unit(.1, 'inches')) # we want to have arrow on the plot
set.seed(1)
ggraph(bigram_graph, layout = "fr") + # to apply a layout to a graph
geom_edge_link(aes(edge_alpha = n), # to make links more or less transparent, based on how frequent they appear
show.legend = FALSE,
arrow = a, # we will have arrows on the plot
end_cap = circle(.07, 'inches')) + # arrows will end before the touching the node
geom_node_point(color = "red", size = 1) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) + # to add names to the plot
theme_void()
bigram_graph <- bigram_counts %>%
filter(n > 200) %>%
graph_from_data_frame()
set.seed(1)
#graph of bigrams
a <- grid::arrow(type = 'closed', length = unit(.1, 'inches')) # we want to have arrow on the plot
set.seed(1)
ggraph(bigram_graph, layout = "fr") + # to apply a layout to a graph
geom_edge_link(aes(edge_alpha = n), # to make links more or less transparent, based on how frequent they appear
show.legend = FALSE,
arrow = a, # we will have arrows on the plot
end_cap = circle(.07, 'inches')) + # arrows will end before the touching the node
geom_node_point(color = "red", size = 1) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) + # to add names to the plot
theme_void()
#see which words are preceded by a negation
negation_words <- c('headset', 'price', 'immersion', 'vr', 'virtual', 'buy')
negated_words <- bigrams %>%
filter(c1 %in% negation_words) %>%
inner_join(afinn, by = c('c2' = 'word')) %>%
count(c1, c2, value, sort = TRUE) %>%
ungroup
top_neg_word <- negated_words %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
group_by(c1) %>%
top_n(10, abs(contribution)) %>%
ungroup() %>%
mutate(c2 = reorder(c2, contribution))
#plotting the frequences
ggplot(top_neg_word, aes(c2, n * value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by negation") +
ylab("Sentiment score * number of occurrences") +
facet_wrap(~c1, ncol = 2, scales = 'free') +
coord_flip()
#see which words are preceded by a negation
negation_words <- c('headset', 'reality', 'immersion', 'society', 'children', 'buy')
negated_words <- bigrams %>%
filter(c1 %in% negation_words) %>%
inner_join(afinn, by = c('c2' = 'word')) %>%
count(c1, c2, value, sort = TRUE) %>%
ungroup
top_neg_word <- negated_words %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
group_by(c1) %>%
top_n(10, abs(contribution)) %>%
ungroup() %>%
mutate(c2 = reorder(c2, contribution))
#plotting the frequences
ggplot(top_neg_word, aes(c2, n * value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by negation") +
ylab("Sentiment score * number of occurrences") +
facet_wrap(~c1, ncol = 2, scales = 'free') +
coord_flip()
corpus2 <- Corpus(VectorSource(comments$ErasedEmoji))
#
corpus2 <- tm_map(corpus2, content_transformer(tolower)) #all lowercase
corpus2 <- Corpus(VectorSource(comments$ErasedEmoji))
#
corpus2 <- tm_map(corpus2, content_transformer(tolower)) #all lowercase
corpus2 <- tm_map(corpus2, removeNumbers) #remove numbers
corpus2 <- tm_map(corpus2, removeWords, c(tm::stopwords('en'))) #remove english stopwords
corpus2 <- tm_map(corpus2, content_transformer(str_replace_all), '-', ' ') #replace dashes with spaces
corpus2 <- tm_map(corpus2, content_transformer(str_replace_all), '–', ' ')
corpus2 <- tm_map(corpus2, removePunctuation) #remove punctuation
corpus2 <- tm_map(corpus2, stripWhitespace) #remove white spaces
#
df2 <- data.frame(text = sapply(corpus2, as.character), stringsAsFactors = FALSE)
df2$review <- rep(c(1:6938),each = 14)
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("expensive", "problem", "hate", "battery")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("expensive", "problem", "hate", "battery")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
corpus2 <- Corpus(VectorSource(comments$ErasedEmoji))
#
corpus2 <- tm_map(corpus2, content_transformer(tolower)) #all lowercase
corpus2 <- tm_map(corpus2, removeNumbers) #remove numbers
corpus2 <- tm_map(corpus2, removeWords, c(tm::stopwords('en'))) #remove english stopwords
corpus2 <- tm_map(corpus2, content_transformer(str_replace_all), '-', ' ') #replace dashes with spaces
corpus2 <- tm_map(corpus2, content_transformer(str_replace_all), '–', ' ')
corpus2 <- tm_map(corpus2, removePunctuation) #remove punctuation
corpus2 <- tm_map(corpus2, stripWhitespace) #remove white spaces
#
df2 <- data.frame(text = sapply(corpus2, as.character), stringsAsFactors = FALSE)
df2$review <- rep(c(1:6938),each = 14)
df2$review <- rep(c(1:34591),each = 3)
t = df2 %>% unnest_tokens(word, text, drop = FALSE) %>%
select(-text) %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, review, sort = TRUE)
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("expensive", "problem", "hate", "battery")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .80) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .70) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .70 & correlation < .90) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .70 & correlation < .80) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50 & correlation < .80) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50 & correlation < .99) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50 & correlation < .95) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50 & correlation < .90) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .40) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .30) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .30) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .30) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
# # We can now visualize the correlations and clusters of words:
# set.seed(2016)
#
# # Let's use correlation matrix for network analysis:
t %>% filter(correlation > .50) %>% # filters data
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "#277BC0", size = 4) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("expensive", "problem", "hate", "battery")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("expensive", "problem", "hate", "bad")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("shit", "problem", "hate", "bad")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("stupid", "problem", "hate", "bad")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("good", "cool", "like", "great")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
#
#
#
#
#
# # We can pick some interesting words and find other most associated with them:
word_cors_top6 <- t %>%
filter(item1 %in% c("good", "cool", "like", "better")) %>% # we choose those words
group_by(item1) %>%
top_n(10) %>% # we choose top 10 (frequent) words
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) # new variable, that arranges second word acording to correlation
#
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
# # graph With colors:
ggplot(word_cors_top6, aes(item2, correlation, fill = correlation)) +
geom_col() +
facet_wrap(~ item1, scales = "free") + # to organize plots
coord_flip() # flips orientation
